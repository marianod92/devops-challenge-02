name: Nakama CICD 

# on: 
#   workflow_dispatch:
#     inputs:
#       logLevel:
#         description: 'Log level'     
#         required: true
#         default: 'info'
#       tags:
#         description: 'Set terraform action: Apply / Destroy'

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: Select Terraform Action
        options: 
        - apply
        - plan
        - destroy
        - outputs
      stack:
        type: choice
        description: Select Terraform Stack
        options: 
        - ecr
        - eks
        - vpc
        - vpc-anton

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

env:
  name: "nakama"
  AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
  AWS_REGION: us-east-1
  base_working_directory: "devops/terraform/aws/nakama"
  TF_VAR_nakama_user: ${{ secrets.nakama_user}}
  TF_VAR_nakama_password: ${{ secrets.nakama_password}}
  TF_VAR_nakama_image_repository: ${{ secrets.nakama_image_repository}}
  TF_VAR_nakama_image_tag: ${{ secrets.nakama_image_tag}}

jobs:
  terraform: 
    name: Action ${{github.event.inputs.action}} on Stack ${{github.event.inputs.stack}}
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: Show Selected Actions/Stack
      run: |
        echo "Action: ${{github.event.inputs.action}}"  
        echo "Stack: ${{github.event.inputs.stack}}"

    - name: Check kubectl 
      run: which kubectl

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Check Terraform Version
      id: version
      run: terraform --version

    - name: Terraform Init
      if: github.event.inputs.action != 'outputs'
      id: init
      run: terraform init
      working-directory: "${{ env.base_working_directory }}/${{  github.event.inputs.stack }}"

    - name: Terraform Format
      if: github.event.inputs.action != 'outputs'
      id: fmt
      run: terraform fmt -check
      working-directory: "${{ env.base_working_directory }}/${{  github.event.inputs.stack }}"

    - name: Terraform Plan
      id: plan
      if: github.ref == 'refs/heads/master' && github.event.inputs.action == 'plan' && github.event.inputs.action != 'outputs'
      run: terraform plan -refresh=true
      working-directory: "${{ env.base_working_directory }}/${{  github.event.inputs.stack }}"

    - name: Terraform Apply | Destroy
      if: github.ref == 'refs/heads/master' && (github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy') &&  github.event.inputs.action != 'outputs'
      run: echo "${{github.event.inputs.action}}"; terraform ${{github.event.inputs.action}} -refresh=true -auto-approve
      working-directory: "${{ env.base_working_directory }}/${{  github.event.inputs.stack }}"

    # - name: Show Outputs
    #   if: github.event.inputs.action == 'apply' || github.event.inputs.action == 'outputs'
    #   run: terraform output -raw eks_cluster_id
    #   working-directory: "${{ env.base_working_directory }}/${{  github.event.inputs.stack }}"

    - name: Update Access
      id: get-url
      if: github.event.inputs.stack == 'eks' && (github.event.inputs.action == 'apply' || github.event.inputs.action == 'outputs')
      run: |
        echo "Update Kubeconfig"
        aws eks update-kubeconfig --name $(aws eks list-clusters | jq -r '.clusters[0]')
        export KUBECONFIG=$HOME/.kube/config

    - name: Get URL
      id: show-url
      if: github.event.inputs.stack == 'eks' && (github.event.inputs.action == 'apply' || github.event.inputs.action == 'outputs')
      run: |
        sudo chmod +x ./devops/utils/wait_for_dns.sh
        timeout 120 ./devops/utils/wait_for_dns.sh

      # until NAKAMA_CONSOLE_LB=$(kubectl get svc nakama -n nakama -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'); do : ; done
      # NAKAMA_CONSOLE_URL="http://${NAKAMA_CONSOLE_LB}:7451/#/status/"
      # echo -e "\e[1;32m"${NAKAMA_CONSOLE_URL}"\e[1;m"

    - name: Unset configuration
      run: rm -rf $HOME/.kube/config; unset AWS_SECRET_KEY; unset AWS_SECRET_ACCESS_KEY
